require 'randomkit'
local myTests = {}
local tester = torch.Tester()

function myTests.multivariateGaussianPDF()

    -- Standard 2-d gaussian, singleton samples, no result tensor
    local D = 2
    local N = 11

    -- Points at which to evaluate the PDF
    local inputXs = torch.linspace(-1, 1, N)

    local expected = {
        {0.058549831524319,  0.070096874908772,  0.080630598589333,  0.089110592667962,  0.094620883979159,  0.096532352630054,  0.094620883979159,  0.089110592667962,  0.080630598589333,  0.070096874908772,  0.058549831524319},
        {0.070096874908772,  0.083921195741359,  0.096532352630054,  0.106684748780159,  0.113281765213783,  0.115570208671698,  0.113281765213783,  0.106684748780159,  0.096532352630054,  0.083921195741359,  0.070096874908772},
        {0.080630598589333,  0.096532352630054,  0.111038635972398,  0.122716671259482,  0.130305046413711,  0.132937382963516,  0.130305046413711,  0.122716671259482,  0.111038635972398,  0.096532352630054,  0.080630598589333},
        {0.089110592667962,  0.106684748780159,  0.122716671259482,  0.135622896239029,  0.144009347774931,  0.146918529576363,  0.144009347774931,  0.135622896239029,  0.122716671259482,  0.106684748780159,  0.089110592667962},
        {0.094620883979159,  0.113281765213783,  0.130305046413711,  0.144009347774931,  0.152914388511582,  0.156003464068888,  0.152914388511582,  0.144009347774931,  0.130305046413711,  0.113281765213783,  0.094620883979159},
        {0.096532352630054,  0.115570208671698,  0.132937382963516,  0.146918529576363,  0.156003464068888,  0.159154943091895,  0.156003464068888,  0.146918529576363,  0.132937382963516,  0.115570208671698,  0.096532352630054},
        {0.094620883979159,  0.113281765213783,  0.130305046413711,  0.144009347774931,  0.152914388511582,  0.156003464068888,  0.152914388511582,  0.144009347774931,  0.130305046413711,  0.113281765213783,  0.094620883979159},
        {0.089110592667962,  0.106684748780159,  0.122716671259482,  0.135622896239029,  0.144009347774931,  0.146918529576363,  0.144009347774931,  0.135622896239029,  0.122716671259482,  0.106684748780159,  0.089110592667962},
        {0.080630598589333,  0.096532352630054,  0.111038635972398,  0.122716671259482,  0.130305046413711,  0.132937382963516,  0.130305046413711,  0.122716671259482,  0.111038635972398,  0.096532352630054,  0.080630598589333},
        {0.070096874908772,  0.083921195741359,  0.096532352630054,  0.106684748780159,  0.113281765213783,  0.115570208671698,  0.113281765213783,  0.106684748780159,  0.096532352630054,  0.083921195741359,  0.070096874908772},
        {0.058549831524319,  0.070096874908772,  0.080630598589333,  0.089110592667962,  0.094620883979159,  0.096532352630054,  0.094620883979159,  0.089110592667962,  0.080630598589333,  0.070096874908772,  0.058549831524319}
    }

    local mu = torch.Tensor(D):fill(0)
    local sigma = torch.eye(D, D)

    for i = 1, N do
        for j = 1, N do
            local x = torch.Tensor({inputXs[i], inputXs[j]}) -- One point
            local result = randomkit.multivariateGaussianPDF(x, mu, sigma)
            tester:assertalmosteq(result, expected[i][j], 1e-5, "standard 2D gaussian pdf should match expected value")
        end
    end


    expected = {
        {0.000783546309733,  0.009425981306195,  0.057892966221331,  0.181535828887076,  0.290627178972662,  0.237545836723785,  0.099127908548398,  0.021119410243217,  0.002297232504213,  0.000127574960313,  0.000003617122809},
        {0.000413713913225,  0.006735118413377,  0.055979326354008,  0.237545836723785,  0.514641141565259,  0.569244578758089,  0.321462729479366,  0.092682913110949,  0.013642879599165,  0.001025297126735,  0.000039339674056},
        {0.000156082511631,  0.003438607125248,  0.038676591690994,  0.222101328146039,  0.651165583844127,  0.974695688057736,  0.744875987239320,  0.290627178972663,  0.057892966221331,  0.005887795269331,  0.000305715122374},
        {0.000042075280991,  0.001254407215304,  0.019093580865481,  0.148379379109559,  0.588704068378952,  1.192498517692075,  1.233263793979027,  0.651165583844127,  0.175535200102957,  0.024158742330882,  0.001697546767696},
        {0.000008104355189,  0.000326973976921,  0.006735118413377,  0.070829569936135,  0.380295596891118,  1.042474192763488,  1.458970971269510,  1.042474192763488,  0.380295596891118,  0.070829569936135,  0.006735118413377},
        {0.000001115394682,  0.000060898486217,  0.001697546767696,  0.024158742330882,  0.175535200102957,  0.651165583844127,  1.233263793979027,  1.192498517692076,  0.588704068378952,  0.148379379109559,  0.019093580865481},
        {0.000000109687550,  0.000008104355189,  0.000305715122374,  0.005887795269331,  0.057892966221331,  0.290627178972662,  0.744875987239320,  0.974695688057736,  0.651165583844127,  0.222101328146039,  0.038676591690994},
        {0.000000007707344,  0.000000770635653,  0.000039339674056,  0.001025297126735,  0.013642879599165,  0.092682913110949,  0.321462729479366,  0.569244578758090,  0.514641141565259,  0.237545836723785,  0.055979326354008},
        {0.000000000386964,  0.000000052359850,  0.000003617122809,  0.000127574960313,  0.002297232504213,  0.021119410243217,  0.099127908548398,  0.237545836723785,  0.290627178972662,  0.181535828887076,  0.057892966221331},
        {0.000000000013882,  0.000000002541946,  0.000000237637192,  0.000011342265395,  0.000276390123759,  0.003438607125248,  0.021841372225399,  0.070829569936135,  0.117269915585660,  0.099127908548398,  0.042780178976706},
        {0.000000000000356,  0.000000000088177,  0.000000011155377,  0.000000720531264,  0.000023760673664,  0.000400038686515,  0.003438607125248,  0.015090389444679,  0.033810816620506,  0.038676591690994,  0.022588014305070}
    }

    local mu = torch.Tensor({0.2, -0.2})
    local sigma = torch.Tensor({{0.1, 2.0}, {2.0, 0.1}})

    for i = 1, N do
        for j = 1, N do
            local x = torch.Tensor({inputXs[i], inputXs[j]}) -- One point
            local result = randomkit.multivariateGaussianPDF(x, mu, sigma)
            tester:assertalmosteq(result, expected[i][j], 1e-5, "non-standard 2D gaussian pdf should match expected value")
        end
    end
end

tester:add(myTests)
tester:run()
